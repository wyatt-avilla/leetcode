# https://leetcode.com/problems/find-the-number-of-ways-to-place-people-ii

import math


class Solution:
    def numberOfPairs(self, points: list[list[int]]) -> int:
        points.sort(key=lambda tup: (tup[0], -tup[1]))
        n = len(points)

        ans = 0
        for i in range(n - 1):
            a = points[i]
            x_min = a[0] - 1
            x_max = math.inf
            y_min = -math.inf
            y_max = a[1] + 1

            for j in range(i + 1, n):
                b = points[j]
                if b[0] > x_min and b[0] < x_max and b[1] > y_min and b[1] < y_max:
                    ans += 1
                    x_min = b[0]
                    y_min = b[1]

        return ans


if __name__ == "__main__":
    assert Solution().numberOfPairs([[6, 2], [4, 4], [2, 6]]) == 2
    assert Solution().numberOfPairs([[1, 1], [2, 2], [3, 3]]) == 0
    assert Solution().numberOfPairs([[3, 1], [1, 3], [1, 1]]) == 2
    assert Solution().numberOfPairs([[2, 3], [5, 3], [2, 5]]) == 2
    assert (
        Solution().numberOfPairs(
            [
                [191, 581],
                [500, 815],
                [43, 352],
                [-264, 220],
                [614, 563],
                [-67, -95],
                [197, 874],
                [833, -696],
                [-688, -480],
                [467, 162],
                [978, -837],
                [-847, 829],
                [503, 362],
                [153, -248],
                [109, 832],
                [411, 103],
                [287, 891],
                [491, 63],
                [820, 799],
                [417, 147],
                [432, -491],
                [-545, 684],
                [631, 342],
                [-310, 598],
                [789, -782],
                [778, -516],
                [-874, -932],
                [-736, 793],
                [794, -962],
                [839, -767],
                [-73, -383],
                [283, 321],
                [-234, 424],
                [-795, -856],
                [-820, 865],
                [53, 290],
                [-700, -327],
                [736, 517],
                [828, -337],
                [585, 144],
                [535, 744],
                [-717, 613],
                [29, 178],
                [-926, 8],
                [-129, 249],
                [132, -977],
                [785, -276],
                [-647, 217],
                [687, -640],
                [167, 153],
                [910, -898],
                [-942, -146],
                [502, -829],
                [-934, 138],
                [-595, -521],
                [-235, 926],
                [710, 492],
                [-409, -637],
                [781, 232],
                [81, -185],
                [764, -16],
                [632, 159],
                [-919, -757],
                [382, -132],
                [350, -89],
                [-667, -360],
                [927, 466],
                [901, 537],
                [-251, 173],
                [764, 503],
                [-772, 220],
                [33, -332],
                [123, -907],
                [982, -709],
                [-206, 993],
                [745, -790],
                [-921, 787],
                [378, -436],
                [602, 58],
                [764, -551],
                [-420, -631],
                [737, -539],
                [429, 549],
                [-151, 239],
                [495, -506],
                [12, -232],
                [-466, 417],
                [-668, -846],
            ],
        )
        == 245
    )
    assert (
        Solution().numberOfPairs(
            [
                [204, -702],
                [-375, -756],
                [533, -212],
                [-992, -600],
                [438, 895],
                [-622, 243],
                [-740, 565],
                [350, 893],
                [-326, -274],
                [-197, 957],
                [484, -183],
                [832, -201],
                [557, 307],
                [955, 407],
                [-123, -238],
                [-271, -800],
                [-809, -884],
                [550, -165],
                [618, 893],
                [-976, -910],
                [-182, 506],
                [-696, 434],
                [-274, 492],
                [360, 720],
                [866, -636],
                [-11, -520],
                [386, 323],
                [259, -917],
                [-867, -906],
                [-600, 797],
                [-955, 105],
                [568, 726],
                [847, -929],
                [-846, -477],
                [-894, 699],
                [-184, -346],
                [-948, 768],
                [395, -24],
                [-517, 31],
                [-364, -368],
                [961, 621],
                [-376, -846],
                [-172, -41],
                [18, 759],
                [308, 44],
                [-907, -85],
                [-986, 194],
                [28, 912],
                [699, 986],
                [-331, -537],
                [271, 674],
                [-852, -39],
                [848, 246],
                [-711, 121],
                [178, -469],
                [775, 344],
                [595, 664],
                [695, -552],
            ],
        )
        == 155
    )
